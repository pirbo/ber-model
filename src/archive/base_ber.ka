%var: 'DG_exc' $DG_exc


%var: 'POLb_DNAap_binding' $POLb_DNAap_binding
%var: 'POLb_DNAap_binding_via_xrcc' $POLb_DNAap_binding_via_xrcc
%var: 'POLb_DNAap_unbinding' $POLb_DNAap_unbinding
%var: 'POLb_lyase' $POLb_lyase
%var: 'POLb_polymerase' $POLb_polymerase
%var: 'POLb_start_lp' $POLb_start_lp
%var: 'LIG3_DNA_bind' $LIG3_DNA_bind
%var: 'LIG3_DNA_binding_via_xrcc' $LIG3_DNA_binding_via_xrcc
%var: 'LIG3_DNA_unbind' $LIG3_DNA_unbind
%var: 'LIG3_ligase' $LIG3_ligase

%var: 'DG_DNA_bind' $DG_DNA_bind
%var: 'DG_DNA_unbind' $DG_DNA_unbind
%var: 'DG_DNA_bind_AP' $DG_DNA_bind_AP
%var: 'DG_DNA_unbind_AP' $DG_DNA_unbind_AP

## DG's action - sliding happens in sliding.ka

###
# APE1 agent's actions
# APE1_DNAap_binding_via_xrcc is the rate that causes the APE1 to displace DG/bind to an AP site
# if it's connected through XRCC1 (or a XRCC1 dimer - this is the reason for 3, not 2)
# This should displace DGs


###
# POLb agent's actions 
### Hypothesis ---> PolB is only checking that the 3' end is OH [Muralidahr et al '12]
'POLb AP site binding' \
      POLb(dbd  ), DNA(base~AP?, pol,   e3~OH?) -> \
      POLb(dbd!1), DNA(base~AP?, pol!1, e3~OH?) \
      @ 'POLb_DNAap_binding' ('POLb_DNAap_binding_via_xrcc' : 3)

'POLb AP site unbinding' \
      POLb(dbd!1), DNA(pol!1) -> POLb(dbd), DNA(pol) \
      @ 'POLb_DNAap_unbinding'

'POLb dRP lyase' \
      POLb(dbd!1), DNA(e3~OH?, pol!1, e5~dRP!0), DNA(e3~dRP!0) -> \
      POLb(dbd!1), DNA(e3~OH?, pol!1, e5~P!0),   DNA(e3~P!0)  @ 'POLb_lyase'

	  
## AP == gaps in the DNA, synth + moves to the right
'POLb polymerase A on gap' \
      POLb(dbd!1), DNA(e5~OH !0), DNA(e3~OH!0,  pol!1, base_state~gapped, base~AP!2), DNA(base~T!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol?) -> \
      POLb(dbd!1), DNA(e5~lig!0), DNA(e3~lig!0, pol,   base_state~OK,      base~A!2 ), DNA(base~T!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol!1) @ 'POLb_polymerase'
'POLb polymerase T on gap' \
      POLb(dbd!1), DNA(e5~OH!0),  DNA(e3~OH!0,  pol!1, base_state~gapped, base~AP!2), DNA(base~A!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol?) -> \
      POLb(dbd!1), DNA(e5~lig!0), DNA(e3~lig!0, pol,   base_state~OK,      base~T!2 ), DNA(base~A!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol!1)  @ 'POLb_polymerase'
'POLb polymerase G on gap' \
      POLb(dbd!1), DNA(e5~OH!0),  DNA(e3~OH!0,  pol!1, base_state~gapped, base~AP!2), DNA(base~C!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol?) -> \
      POLb(dbd!1), DNA(e5~lig!0), DNA(e3~lig!0, pol,   base_state~OK,      base~G!2 ), DNA(base~C!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol!1)  @ 'POLb_polymerase'
'POLb polymerase C on gap' \
      POLb(dbd!1), DNA(e5~OH!0),  DNA(e3~OH!0,  pol!1, base_state~gapped, base~AP!2 ), DNA(base~G!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol?) -> \
      POLb(dbd!1), DNA(e5~lig!0), DNA(e3~lig!0, pol,   base_state~OK,      base~C!2  ), DNA(base~G!2, e3!3), DNA(e5!3, base!4), DNA(base!4, pol!1)  @ 'POLb_polymerase'

'POLb jumpstart Long Patch repair initA' \
      POLb(dbd!1), DNA(pol!1, base!2, init~A, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~P?  ) -> \
      POLb(dbd!1), DNA(pol,   base  , init~A, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~OH!5), \
      DNA(e3~OH!5, pol!1, base~AP!2, init~A, base_state~gapped, meth~false, e5~P) @ 'POLb_start_lp'
'POLb jumpstart Long Patch repair initT' \
      POLb(dbd!1), DNA(pol!1, base!2, init~T, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~P?  ) -> \
      POLb(dbd!1), DNA(pol,   base  , init~T, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~OH!5), \
      DNA(e3~OH!5, pol!1, base~AP!2, init~T, base_state~gapped, meth~false, e5~P) @ 'POLb_start_lp'
'POLb jumpstart Long Patch repair initG' \
      POLb(dbd!1), DNA(pol!1, base!2, init~G, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~P?  ) -> \
      POLb(dbd!1), DNA(pol,   base  , init~G, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~OH!5), \
      DNA(e3~OH!5, pol!1, base~AP!2, init~G, base_state~gapped, meth~false, e5~P) @ 'POLb_start_lp'
'POLb jumpstart Long Patch repair initC' \
      POLb(dbd!1), DNA(pol!1, base!2, init~C, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~P?  ) -> \
      POLb(dbd!1), DNA(pol,   base  , init~C, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~OH!5), \
      DNA(e3~OH!5, pol!1, base~AP!2, init~C, base_state~gapped, meth~false, e5~P) @ 'POLb_start_lp'
'POLb jumpstart Long Patch repair initmC' \
      POLb(dbd!1), DNA(pol!1, base!2, init~mC, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~P?  ) -> \
      POLb(dbd!1), DNA(pol,   base  , init~mC, e5!_), DNA(base!2, e5!3), DNA(e3!3, base!4), DNA(base!4, e5~OH!5), \
      DNA(e3~OH!5, pol!1, base~AP!2, init~mC, base_state~gapped, meth~false, e5~P) @ 'POLb_start_lp'
      
###
# LIG3 agent's actions
'LIG3 DNA binding' \
      LIG3(dbd  ), DNA(e3~lig?,lig,  e5~P?) -> \
      LIG3(dbd!1), DNA(e3~lig?,lig!1,e5~P?) \
      @ 'LIG3_DNA_bind'

'LIG3 DNA binding (thru XRCC)' \
      LIG3(dbd  , xrc!1), XRCC1(lig!1, dbd!2), DNA(e3~lig?,xrc!2, lig,  e5~P?) -> \
      LIG3(dbd!3, xrc!1), XRCC1(lig!1, dbd!2), DNA(e3~lig?,xrc!2, lig!3,e5~P?) @ 'LIG3_DNA_binding_via_xrcc'

'LIG3 DNA binding (thru 2XRCC)' \
      LIG3(dbd  , xrc!1), XRCC1(lig!1, xrc!2), XRCC1(xrc!2, dbd!3), DNA(e3~lig?,xrc!3, lig,  e5~P?) -> \
      LIG3(dbd!4, xrc!1), XRCC1(lig!1, xrc!2), XRCC1(xrc!2, dbd!3), DNA(e3~lig?,xrc!3, lig!4,e5~P?) \
      @ 'LIG3_DNA_binding_via_xrcc'

'LIG3 DNA unbinding' \
      LIG3(dbd!1), DNA(lig!1) -> LIG3(dbd), DNA(lig) \
      @ 'LIG3_DNA_unbind'

# LIG3 has a high turnover
'LIG3 ligase action' \
      LIG3(dbd!1), DNA(e3~lig?, lig!1,e5~P?) -> \
      LIG3(dbd),   DNA(e3~lig?, lig,  e5~lig?) \
      @ 'LIG3_ligase'


## Basic observables

%obs: 'locked DG' DG(cat!_)
%obs: 'bound APE1' APE1(dbd!_)
%obs: 'bound POLb' POLb(dbd!_)
%obs: 'bound LIG3' LIG3(dbd!_)
#%obs: 'e3_OH' DNA(e3~OH?)
#%obs: 'e3_lig' DNA(e3~lig?)
#%obs: 'e5_lig' DNA(e5~lig?)
#%obs: 'e5_P' DNA(e5~P?)
#%obs: 'e5_dRP' DNA(e5~dRP?)

%var: 'bp_tot' DNA()
%var: 'AP' DNA(dg,ape,xrc,pol,base~AP?)
%obs: 'toxic AP ratio' 'AP'/'bp_tot'

%var: 'healthy' DNA(e3~lig?,base_state~OK,e5~lig?)
%obs: 'healthy_ratio' 'healthy'/'bp_tot'


